# .github/workflows/build.yml
name: Build and Release on Version Change

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    outputs: # Define output for the build job
      app_version: ${{ steps.get_version.outputs.app_version }} # Pass the detected version
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        poetry install --no-root --sync

    - name: Generate _version.py from pyproject.toml
      id: get_version # Give this step an ID
      run: |
        APP_VERSION=$(poetry version -s)
        echo "PyProject Version: $APP_VERSION"
        echo "__version__ = \"$APP_VERSION\"" > src/_version.py
        echo "Created src/_version.py with version $APP_VERSION"
        # Set output for use in artifact naming and release job
        echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT

    - name: Build with PyInstaller
      run: |
        source .venv/Scripts/activate
        pyinstaller open-rewrite-windows-x64.spec

    - name: Upload executable artifact
      uses: actions/upload-artifact@v4
      with:
        # Use the version from pyproject.toml
        name: open-rewrite-windows-x64-v${{ steps.get_version.outputs.app_version }}
        path: dist/open-rewrite-windows-x64.exe # Adjust if spec outputs a different name

  release:
    needs: build # Depends on the build job completing
    runs-on: ubuntu-latest # Can use ubuntu for release management
    permissions:
      contents: write # Needed to create releases and associated tags
    steps:
    # +++ Step to get the latest release tag +++
    - name: Get latest release tag
      id: get_latest_tag
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const latestRelease = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            // Return the tag name, removing potential leading 'v' for comparison
            const tagName = latestRelease.data.tag_name || 'v0.0.0'; // Default if no releases
            console.log(`Latest release tag found: ${tagName}`);
            return tagName.replace(/^v/, ''); // Remove leading 'v'
          } catch (error) {
            if (error.status === 404) {
              console.log('No releases found, assuming version 0.0.0');
              return '0.0.0'; // Default version if no releases exist
            } else {
              console.error('Error fetching latest release:', error);
              throw error; // Re-throw other errors
            }
          }
      # Continue even if fetching fails (defaults to 0.0.0)
      continue-on-error: true

    # +++ Step to compare versions +++
    - name: Install Packaging library # Needed for robust version comparison
      run: python -m pip install packaging

    - name: Compare versions
      id: compare_versions
      env:
        CURRENT_VERSION: ${{ needs.build.outputs.app_version }}
        LATEST_TAG_VERSION: ${{ steps.get_latest_tag.outputs.result }}
      run: |
        echo "Current pyproject version: $CURRENT_VERSION"
        echo "Latest release tag version: $LATEST_TAG_VERSION"
        python -c "from packaging.version import parse; \
                   should_release = parse('$CURRENT_VERSION') > parse('$LATEST_TAG_VERSION'); \
                   print(f'Should release: {should_release}'); \
                   print(f'::set-output name=should_release::{str(should_release).lower()}')"
        # Note: set-output syntax might change, adjust if needed based on runner version

    # +++ Conditionally Download Artifact +++
    - name: Download build artifact
      if: steps.compare_versions.outputs.should_release == 'true'
      uses: actions/download-artifact@v4
      with:
        # Match the artifact name using the version from the build job output
        name: open-rewrite-windows-x64-v${{ needs.build.outputs.app_version }}
        path: artifacts/

    - name: List downloaded files (for debugging)
      if: steps.compare_versions.outputs.should_release == 'true'
      run: ls -R artifacts

    # +++ Conditionally Create Release +++
    - name: Create Release and Tag
      if: steps.compare_versions.outputs.should_release == 'true'
      uses: softprops/action-gh-release@v1
      with:
        # This action will create the tag if it doesn't exist
        tag_name: v${{ needs.build.outputs.app_version }} # Create tag like v0.2.0
        name: Release v${{ needs.build.outputs.app_version }} # Release title
        files: artifacts/open-rewrite-windows-x64.exe # Adjust path if needed
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # +++ Step to indicate skipping +++
    - name: Release Skipped Notification
      if: steps.compare_versions.outputs.should_release == 'false'
      run: |
        echo "Skipping release creation."
        echo "Current version (${{ needs.build.outputs.app_version }}) is not newer than the latest release tag version (${{ steps.get_latest_tag.outputs.result }})."