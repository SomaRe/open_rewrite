name: Build and Release on Version Change

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.compare_versions.outputs.should_release }}
      app_version: ${{ steps.get_version.outputs.app_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          APP_VERSION=$(grep '^version =' pyproject.toml | cut -d '"' -f2)
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
          echo "Detected app version: $APP_VERSION"

      - name: Get latest release tag
        id: get_latest_tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const latestRelease = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              return latestRelease.data.tag_name.replace(/^v/, '');
            } catch (error) {
              if (error.status === 404) return '0.0.0';
              throw error;
            }

      - name: Install packaging for version comparison
        run: python -m pip install packaging

      - name: Compare versions
        id: compare_versions
        env:
          CURRENT_VERSION: ${{ steps.get_version.outputs.app_version }}
          LATEST_TAG_VERSION: ${{ steps.get_latest_tag.outputs.result }}
        run: |
          python -c "from packaging.version import parse; \
                     current = '${{ env.CURRENT_VERSION }}'.strip('\"'); \
                     latest = '${{ env.LATEST_TAG_VERSION }}'.strip('\"'); \
                     print('should_release=' + str(parse(current) > parse(latest)).lower())" >> $GITHUB_OUTPUT
          echo "Current: $CURRENT_VERSION, Latest: $LATEST_TAG_VERSION"

  build:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-root --sync

      - name: Generate _version.py
        run: |
          APP_VERSION="${{ needs.check-version.outputs.app_version }}"
          echo "__version__ = \"$APP_VERSION\"" > src/_version.py

      - name: Build with PyInstaller
        run: |
          source .venv/Scripts/activate
          pyinstaller open-rewrite-windows-x64.spec

      - uses: actions/upload-artifact@v4
        with:
          name: open-rewrite-windows-x64-v${{ needs.check-version.outputs.app_version }}
          path: dist/open-rewrite-windows-x64.exe

  release:
    needs: [check-version, build]
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: open-rewrite-windows-x64-v${{ needs.check-version.outputs.app_version }}
          path: artifacts/

      - name: Release artifact
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.app_version }}
          name: Release v${{ needs.check-version.outputs.app_version }}
          files: artifacts/open-rewrite-windows-x64.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  skip-notification:
    needs: check-version
    if: needs.check-version.outputs.should_release == 'false'
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "Skipping build and release. Version (${{ needs.check-version.outputs.app_version }}) has not changed."